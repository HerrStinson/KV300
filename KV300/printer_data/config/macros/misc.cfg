#####################################################################
#	Misc macros
#####################################################################

[gcode_macro CENTER]
gcode:
    G0 X175 Y175 Z30 F3600

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28 Z
    
    G0 X150 Y150 Z30 F3600

    RESTORE_GCODE_STATE NAME=STATE_G32

[delayed_gcode _SET_CASELIGHT_OFF]
gcode:
    SET_CASELIGHT_OFF

[gcode_macro SET_CASELIGHT_ON]
description: Turn on the caselight LEDs
gcode:
    SET_PIN PIN=caselight VALUE=1

[gcode_macro SET_CASELIGHT_OFF]
description: Turn off the caselight LEDs
gcode:
    SET_PIN PIN=caselight VALUE=0

[gcode_macro TOGGLE_CASELIGHT]
description: Switch caselight on/off
gcode:
	{% set status = printer['output_pin caselight'].value | float %}
	{% if status == 0 %}
		SET_CASELIGHT_ON
	{% else %}
		SET_CASELIGHT_OFF
	{% endif %}
	
[gcode_macro WAKEUP]
gcode:
    SET_CASELIGHT_ON
    UNDERGLOW_SET RED=255 GREEN=0 BLUE=0
    START_TEMP_MONITOR
    STATUS_READY

[gcode_macro SLEEP]
gcode:
    M84
    M107
    STOP_TEMP_MONITOR
    TURN_OFF_HEATERS
    SET_CASELIGHT_OFF
    UPDATE_DELAYED_GCODE ID=_DISABLE_COOLING DURATION=300
    UPDATE_DELAYED_GCODE ID=_DISABLE_EXHAUST DURATION=300
    SET_FAN_SPEED FAN=chamber_fan SPEED=0
    STATUS_OFF

[delayed_gcode _TEMP_MONITOR]
initial_duration: 60.0
gcode:
    {% set mcu_target = 40 %}
    {% set host_target = 55 %}
    {% set encl_target = 60 %}
    {% set verbose = False %}
    {% set period = 60 %}
    {% set default_speed = 0.5 %}
    {% set printing_speed = 0.25 %}
    {% set max_speed = 1.0 %}
    {% set min_speed = 0.0 %}
    {% set threshold = 1.1 %}

    {% set mcu = printer['temperature_sensor Mcu_temp'].temperature | float %}
    #   {% set encl = printer['temperature_sensor enclosure_temp'].temperature | float %}
    {% set encl = 0 | float %}
    {% set host = printer['temperature_sensor Host_temp'].temperature | float %}

    {% if verbose %}
        { action_respond_info("Entering Temp Montor routine") }
        { action_respond_info("Printer state %s" % printer.idle_timeout.state) }
    {% endif %}

    {% if printer.idle_timeout.state == 'Printing' %}
        {% set min_speed = printing_speed %}
    {% endif %}

    {% if printer.idle_timeout.state != 'Idle' %}

        {% if mcu > (mcu_target * threshold) or host > (host_target * threshold) %}
            {% if verbose %}
            { action_respond_info("MCU/Host temp (%.1f/%.1f) exceeds max fan threshold (%.1f/%.1f), setting cooling to %.0f%%" % (mcu, host, mcu_target*threshold,host_target * threshold,max_speed*100)) }
            {% endif %}
            SET_FAN_SPEED FAN=cooling_fan SPEED={max_speed}
        {% elif mcu > mcu_target or host > host_target %}
            {% if verbose %}
            { action_respond_info("MCU/Host temp (%.1f/%.1f) above target temp (%.1f/%.1f), setting cooling to %.0f%%" % (mcu, host, mcu_target, host_target,default_speed*100)) }
            {% endif %}    
            SET_FAN_SPEED FAN=cooling_fan SPEED={default_speed}
        {% else %}
            {% if verbose %}
            { action_respond_info("MCU/Host (%.1f/%.1f) temp below target temp (%.1f,%.1f) while %s, setting cooling to %.0f%%" % (mcu, host, mcu_target, host_target,printer.idle_timeout.state,min_speed*100)) }
            {% endif %}
            SET_FAN_SPEED FAN=cooling_fan SPEED={min_speed}
        {% endif %}
        
        #   {% if encl > (encl_target * threshold) %}
        #     {% if verbose %}
        #       { action_respond_info("Enclosure temp (%.1f) exceeds max fan threshold (%.1f), setting exhaust to %.0f%%" % (encl, encl_target * threshold,max_speed*100)) }
        #     {% endif %}
        #     SET_FAN_SPEED FAN=exhaust_fan SPEED={max_speed}
        #   {% elif encl > encl_target %}
        #     {% if verbose %}
        #       { action_respond_info("Enclosure temp (%.1f) above target temp (%.1f), setting exhaust to %.0f%%" % (encl, encl_target,default_speed*100)) }
        #     {% endif %}    
        #     SET_FAN_SPEED FAN=exhaust_fan SPEED={default_speed}
        #   {% else %}
        #     {% if verbose %}
        #       { action_respond_info("Enclosure temp (%.1f) below target temp (%.1f), setting exhaust to %.0f%%" % (encl, encl_target,min_speed*100)) }
        #     {% endif %}
        #     SET_FAN_SPEED FAN=exhaust_fan SPEED={min_speed}
        #   {% endif %}
    {% else %}
        {% if verbose %}
        { action_respond_info("Printer idle, skipping temperature checks. MCU: %.1f, Host: %.1f, Enclosure: %.1f." % (mcu, host, encl )) }
        {% endif %}
    {% endif %}

    {% if verbose %}
        { action_respond_info("Exiting Temp Montor routine") }
    {% endif %}

    UPDATE_DELAYED_GCODE ID=_TEMP_MONITOR DURATION={period}

[gcode_macro START_TEMP_MONITOR]
gcode:
    UPDATE_DELAYED_GCODE ID=_TEMP_MONITOR DURATION=1

[gcode_macro STOP_TEMP_MONITOR]
gcode:
    UPDATE_DELAYED_GCODE ID=_TEMP_MONITOR DURATION=0  
